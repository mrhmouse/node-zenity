// Generated by CoffeeScript 1.6.2
(function() {
  var ZENITY, Zenity, bind, exec, fix, run,
    __hasProp = {}.hasOwnProperty;

  exec = require('child_process').exec;

  module.exports = Zenity = {};

  ZENITY = 'zenity';

  run = function(mode, opts, callback) {
    return exec("" + ZENITY + " " + mode + " " + (opts.join(' ')), callback);
  };

  bind = function(name, map, handler) {
    return function(o, callback) {
      var getter, key, opts;

      opts = [];
      if (typeof o === 'object') {
        for (key in map) {
          if (!__hasProp.call(map, key)) continue;
          getter = map[key];
          if (o[key] != null) {
            opts.push(getter(o[key]));
          }
        }
      } else if (typeof callback !== 'function') {
        callback = o;
      }
      console.log("Calling zenity --" + name + " " + (opts.join(' ')));
      run("--" + name, opts, function(error, stdout) {
        if (error != null) {
          throw error;
        }
        if ((handler != null) && (callback != null)) {
          return process.nextTick(function() {
            return handler(stdout, callback);
          });
        }
      });
    };
  };

  fix = function(text) {
    var fixed;

    fixed = text.replace('"', '\\"');
    fixed = fixed.replace('\n', '\\n');
    return "\"" + fixed + "\"";
  };

  Zenity.calendar = bind('calendar', {
    text: function(v) {
      return "--text=" + (fix(v));
    },
    day: function(v) {
      return "--day=" + v;
    },
    month: function(v) {
      return "--month=" + v;
    },
    year: function(v) {
      return "--year=" + v;
    },
    dateFormat: function(v) {
      return "--date-format=" + (fix(v));
    }
  }, function(date, cb) {
    return cb(new Date(date.toString()));
  });

  Zenity.entry = bind('entry', {
    text: function(v) {
      return "--text=" + (fix(v));
    },
    entryText: function(v) {
      return "--entry-text=" + (fix(v));
    },
    hideText: function() {
      return '--hide-text';
    }
  }, function(answer, cb) {
    return cb(answer);
  });

  Zenity.error = bind('error', {
    text: function(v) {
      return "--text=" + (fix(v));
    },
    noWrap: function() {
      return '--no-wrap';
    },
    noMarkup: function() {
      return '--no-markup';
    }
  });

  Zenity.fileSelection = bind('file-selection', {
    filename: function(v) {
      return "--filename=" + (fix(v));
    },
    multiple: function() {
      return '--multiple';
    },
    directory: function() {
      return '--directory';
    },
    save: function() {
      return '--save';
    },
    separator: function(v) {
      return "--separator=" + (fix(v));
    },
    confirmOverwrite: function() {
      return '--confirm-overwrite';
    },
    fileFilter: function(v) {
      return "--file-filter=" + (fix(v));
    }
  }, function(file, cb) {
    return cb(file);
  });

  Zenity.info = bind('info', {
    text: function(v) {
      return "--text=" + (fix(v));
    },
    noWrap: function() {
      return '--no-wrap';
    },
    noMarkup: function() {
      return '--no-markup';
    }
  });

  Zenity.question = bind('question', {
    text: function(v) {
      return "--text=" + (fix(v));
    },
    noWrap: function() {
      return '--no-wrap';
    },
    noMarkup: function() {
      return '--no-markup';
    },
    okLabel: function(v) {
      return "--ok-label=" + (fix(v));
    },
    cancelLabel: function(v) {
      return "--cancel-label=" + (fix(v));
    }
  });

  Zenity.textInfo = bind('text-info', {
    filename: function(v) {
      return "--filename=" + (fix(v));
    },
    editable: function() {
      return '--editable';
    },
    checkbox: function(v) {
      return "--checkbox=" + (fix(v));
    },
    okLabel: function(v) {
      return "--ok-label=" + (fix(v));
    },
    cancelLabel: function(v) {
      return "--cancel-label=" + (fix(v));
    }
  });

  Zenity.warning = bind('warning', {
    text: function(v) {
      return "--text=" + (fix(v));
    },
    noWrap: function() {
      return '--no-wrap';
    },
    noMarkup: function() {
      return '--no-markup';
    }
  });

  Zenity.colorSelection = bind('color-selection', {
    color: function(v) {
      return "--color=" + v;
    },
    showPalette: function() {
      return '--show-palette';
    }
  });

  Zenity.password = bind('password', {
    username: function() {
      return '--username';
    }
  });

}).call(this);

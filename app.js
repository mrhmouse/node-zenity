// Generated by CoffeeScript 1.6.2
(function() {
  var ZENITY, Zenity, bind, exec, fix, flag, option, passThrough, run, status, statusOnly, transform,
    __hasProp = {}.hasOwnProperty;

  exec = require('child_process').exec;

  module.exports = Zenity = {};

  ZENITY = 'zenity';

  run = function(mode, opts, callback) {
    return exec("" + ZENITY + " " + mode + " " + (opts.join(' ')), callback);
  };

  bind = function(name, map, handler) {
    return function(o, callback) {
      var getter, key, opts;

      opts = [];
      if (typeof o === 'object') {
        for (key in map) {
          if (!__hasProp.call(map, key)) continue;
          getter = map[key];
          if (o[key] != null) {
            opts.push(getter(o[key]));
          }
        }
      } else if (typeof callback !== 'function') {
        callback = o;
      }
      run("--" + name, opts, function(error, stdout) {
        var code;

        code = error == null ? 0 : error.code;
        if ((handler != null) && (callback != null)) {
          return process.nextTick(function() {
            return handler(status(code), stdout, callback);
          });
        }
      });
    };
  };

  fix = function(text) {
    var fixed;

    fixed = text.replace('"', '\\"');
    fixed = fixed.replace('\n', '\\n');
    return "\"" + fixed + "\"";
  };

  status = function(code) {
    return {
      cancel: code === 1,
      timeout: code === 5,
      success: code === 0,
      error: code !== 0 && code !== 1 && code !== 5
    };
  };

  statusOnly = function(status, stdout, cb) {
    return cb(status);
  };

  transform = function(f) {
    return function(status, stdout, cb) {
      return cb(status, f(stdout));
    };
  };

  passThrough = transform(function(v) {
    return v;
  });

  option = function(name) {
    return function(v) {
      return "--" + name + "=" + (fix(v));
    };
  };

  flag = function(name) {
    return "--" + name;
  };

  Zenity.calendar = bind('calendar', {
    text: option('text'),
    day: option('day'),
    month: option('month'),
    year: option('year'),
    dateFormat: option('date-format')
  }, transform(function(date) {
    return new Date(date.toString());
  }));

  Zenity.entry = bind('entry', {
    text: option('text'),
    entryText: option('entry-text'),
    hideText: flag('hide-text')
  }, passThrough);

  Zenity.error = bind('error', {
    text: option('text'),
    noWrap: flag('no-wrap'),
    noMarkup: flag('no-markup')
  }, statusOnly);

  Zenity.fileSelection = bind('file-selection', {
    filename: option('filename'),
    multiple: flag('multiple'),
    directory: flag('directory'),
    save: flag('save'),
    separator: option('separator'),
    confirmOverwrite: flag('confirm-overwrite'),
    fileFilter: option('file-filter')
  }, passThrough);

  Zenity.info = bind('info', {
    text: option('text'),
    noWrap: flag('no-wrap'),
    noMarkup: flag('no-markup')
  }, statusOnly);

  Zenity.question = bind('question', {
    text: option('text'),
    noWrap: flag('no-wrap'),
    noMarkup: flag('no-markup'),
    okLabel: option('ok-label'),
    cancelLabel: option('cancel-label')
  }, statusOnly);

  Zenity.textInfo = bind('text-info', {
    filename: option('filename'),
    editable: flag('editable'),
    checkbox: option('checkbox'),
    okLabel: option('ok-label'),
    cancelLabel: option('cancel-label')
  }, statusOnly);

  Zenity.warning = bind('warning', {
    text: option('text'),
    noWrap: flag('no-wrap'),
    noMarkup: flag('no-markup')
  }, statusOnly);

  Zenity.colorSelection = bind('color-selection', {
    color: option('color'),
    showPalette: flag('show-palette')
  }, passThrough);

  Zenity.password = bind('password', {
    username: flag('username')
  }, passThrough);

  Zenity.scale = bind('scale', {
    text: option('text'),
    value: option('value'),
    minValue: option('min-value'),
    maxValue: option('max-value'),
    step: option('step'),
    printPartial: flag('print-partial'),
    hideValue: flag('hide-value')
  }, passThrough);

  Zenity.forms = bind('forms', {
    text: option('text'),
    separator: option('separator'),
    dateFormat: option('forms-date-format'),
    entries: function(entries) {
      return entries.map(option('add-entry')).join(' ');
    },
    passwords: function(entries) {
      return entries.map(option('add-password')).join(' ');
    },
    calendars: function(entries) {
      return entries.map(option('add-calendar')).join(' ');
    }
  }, passThrough);

}).call(this);

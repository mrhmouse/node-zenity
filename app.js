// Generated by CoffeeScript 1.6.2
(function() {
  var Command, extend, key, name, spawn, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  spawn = require('child_process').spawn;

  Command = (function() {
    function Command() {
      var options;

      options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.close = __bind(this.close, this);
      this.receive = __bind(this.receive, this);
      this.send = __bind(this.send, this);
      this.process = spawn('zenity', options);
    }

    Command.prototype.send = function(data, f) {
      var buffer;

      buffer = new Buffer(data.toString() + '\n\n');
      this.process.stdin.write(buffer, f);
    };

    Command.prototype.receive = function(f) {
      this.process.stdout.on('data', f);
    };

    Command.prototype.close = function(f) {
      if ((f != null) && typeof f === 'function') {
        this.process.on('close', function(code) {
          var status;

          status = {
            ok: code === 0,
            cancel: code === 1,
            timeout: code === 5
          };
          return f(status);
        });
      } else {
        this.process.stdin.end(f);
      }
    };

    return Command;

  })();

  extend = function(name) {
    var CommandSubtype;

    return CommandSubtype = (function(_super) {
      __extends(CommandSubtype, _super);

      function CommandSubtype() {
        var options;

        options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        CommandSubtype.__super__.constructor.apply(this, ["--" + name].concat(__slice.call(options)));
      }

      return CommandSubtype;

    })(Command);
  };

  _ref = {
    Calendar: 'calendar',
    Entry: 'entry',
    Error: 'error',
    FileSelection: 'file-selection',
    Info: 'info',
    List: 'list',
    Notification: 'notification',
    Progress: 'progress',
    Question: 'question',
    TextInfo: 'text-info',
    Warning: 'warning',
    Scale: 'scale',
    ColorSelection: 'color-selection',
    Password: 'password',
    Forms: 'forms'
  };
  for (key in _ref) {
    if (!__hasProp.call(_ref, key)) continue;
    name = _ref[key];
    module.exports[key] = extend(name);
  }

}).call(this);
